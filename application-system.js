// H·ªá th·ªëng qu·∫£n l√Ω ·ª©ng tuy·ªÉn
class ApplicationSystem {
    constructor() {
        this.applications = JSON.parse(localStorage.getItem('jobApplications') || '[]');
        this.users = JSON.parse(localStorage.getItem('users') || '[]');
        this.jobs = JSON.parse(localStorage.getItem('jobs') || '[]');
    }

    // ·ª®ng tuy·ªÉn c√¥ng vi·ªác
    applyForJob(jobId, userId) {
        const user = this.users.find(u => u.id === userId);
        const job = this.jobs.find(j => j.id === jobId);

        if (!user) {
            throw new Error('Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i');
        }

        if (!user.hasCV) {
            throw new Error('Vui l√≤ng t·∫°o CV tr∆∞·ªõc khi ·ª©ng tuy·ªÉn');
        }

        if (!job) {
            throw new Error('C√¥ng vi·ªác kh√¥ng t·ªìn t·∫°i');
        }

        // Ki·ªÉm tra ƒë√£ ·ª©ng tuy·ªÉn ch∆∞a
        const existingApplication = this.applications.find(app => 
            app.jobId === jobId && app.userId === userId
        );

        if (existingApplication) {
            throw new Error('B·∫°n ƒë√£ ·ª©ng tuy·ªÉn c√¥ng vi·ªác n√†y r·ªìi');
        }

        // T·∫°o ƒë∆°n ·ª©ng tuy·ªÉn
        const application = {
            id: Date.now(),
            jobId: jobId,
            userId: userId,
            jobTitle: job.title,
            company: job.company,
            applicantName: user.name,
            applicantEmail: user.email,
            applicantPhone: user.phone,
            cvData: user.cv,
            status: 'pending', // pending, reviewing, accepted, rejected
            appliedAt: new Date().toISOString(),
            updatedAt: new Date().toISOString(),
            employerViewed: false
        };

        this.applications.push(application);
        this.saveApplications();

        // G·ª≠i th√¥ng b√°o x√°c nh·∫≠n
        this.sendApplicationConfirmation(application);

        return application;
    }

    // Nh√† tuy·ªÉn d·ª•ng xem CV
    employerViewCV(applicationId) {
        const application = this.applications.find(app => app.id === applicationId);
        if (application) {
            application.employerViewed = true;
            application.updatedAt = new Date().toISOString();
            this.saveApplications();
        }
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ·ª©ng tuy·ªÉn
    updateApplicationStatus(applicationId, status, feedback = '') {
        const application = this.applications.find(app => app.id === applicationId);
        if (application) {
            application.status = status;
            application.feedback = feedback;
            application.updatedAt = new Date().toISOString();
            this.saveApplications();

            // G·ª≠i th√¥ng b√°o cho ·ª©ng vi√™n
            this.sendStatusNotification(application);

            return application;
        }
    }

    // G·ª≠i th√¥ng b√°o x√°c nh·∫≠n ·ª©ng tuy·ªÉn
    sendApplicationConfirmation(application) {
        const message = `üéØ ƒê∆†N ·ª®NG TUY·ªÇN ƒê√É G·ª¨I TH√ÄNH C√îNG\n\n` +
                       `V·ªã tr√≠: ${application.jobTitle}\n` +
                       `C√¥ng ty: ${application.company}\n` +
                       `Th·ªùi gian: ${new Date(application.appliedAt).toLocaleDateString('vi-VN')}\n\n` +
                       `ƒê∆°n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn nh√† tuy·ªÉn d·ª•ng. ` +
                       `B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o khi c√≥ k·∫øt qu·∫£.`;

        // G·ª≠i email
        this.sendEmail(application.applicantEmail, 'X√°c nh·∫≠n ·ª©ng tuy·ªÉn th√†nh c√¥ng', message);
        
        // G·ª≠i SMS (gi·∫£ l·∫≠p)
        this.sendSMS(application.applicantPhone, message);
    }

    // G·ª≠i th√¥ng b√°o k·∫øt qu·∫£
    sendStatusNotification(application) {
        let title, message;

        switch (application.status) {
            case 'reviewing':
                title = 'üìã ƒê∆†N ·ª®NG TUY·ªÇN ƒêANG ƒê∆Ø·ª¢C XEM X√âT';
                message = `ƒê∆°n ·ª©ng tuy·ªÉn v·ªã tr√≠ ${application.jobTitle} t·∫°i ${application.company} ` +
                         `ƒëang ƒë∆∞·ª£c nh√† tuy·ªÉn d·ª•ng xem x√©t. B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c k·∫øt qu·∫£ trong th·ªùi gian s·ªõm nh·∫•t.`;
                break;
            
            case 'accepted':
                title = 'üéâ CH√öC M·ª™NG B·∫†N ƒê√É TR√öNG TUY·ªÇN!';
                message = `Ch√∫c m·ª´ng! B·∫°n ƒë√£ ƒë∆∞·ª£c nh·∫≠n v√†o v·ªã tr√≠ ${application.jobTitle} t·∫°i ${application.company}.` +
                         `\n\nTh√¥ng tin li√™n h·ªá:\n` +
                         `üìû Li√™n h·ªá: ${application.company}\n` +
                         `üìß Email: ${application.company.toLowerCase().replace(/\s+/g, '')}@company.com\n\n` +
                         `H√£y li√™n h·ªá v·ªõi nh√† tuy·ªÉn d·ª•ng ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt!`;
                if (application.feedback) {
                    message += `\n\nNh·∫≠n x√©t t·ª´ nh√† tuy·ªÉn d·ª•ng:\n${application.feedback}`;
                }
                break;
            
            case 'rejected':
                title = 'üòî K·∫æT QU·∫¢ ·ª®NG TUY·ªÇN';
                message = `C·∫£m ∆°n b·∫°n ƒë√£ quan t√¢m ƒë·∫øn v·ªã tr√≠ ${application.jobTitle} t·∫°i ${application.company}. ` +
                         `R·∫•t ti·∫øc, h·ªì s∆° c·ªßa b·∫°n kh√¥ng ph√π h·ª£p v·ªõi y√™u c·∫ßu c√¥ng vi·ªác l·∫ßn n√†y.` +
                         `\n\nCh√∫c b·∫°n may m·∫Øn trong nh·ªØng c∆° h·ªôi ti·∫øp theo!`;
                if (application.feedback) {
                    message += `\n\nNh·∫≠n x√©t t·ª´ nh√† tuy·ªÉn d·ª•ng:\n${application.feedback}`;
                }
                break;
        }

        if (title && message) {
            // G·ª≠i email
            this.sendEmail(application.applicantEmail, title, message);
            
            // G·ª≠i SMS
            this.sendSMS(application.applicantPhone, `${title}\n\n${message}`);
            
            // Hi·ªÉn th·ªã th√¥ng b√°o trong app
            this.showInAppNotification(application.userId, title, message);
        }
    }

    // G·ª≠i email (gi·∫£ l·∫≠p)
    sendEmail(to, subject, body) {
        console.log(`üìß G·ª≠i email ƒë·∫øn: ${to}`);
        console.log(`Ti√™u ƒë·ªÅ: ${subject}`);
        console.log(`N·ªôi dung: ${body}`);
        console.log('---');

        // Trong th·ª±c t·∫ø, ƒë√¢y s·∫Ω l√† API call ƒë·∫øn email service
        const emails = JSON.parse(localStorage.getItem('sentEmails') || '[]');
        emails.push({
            to: to,
            subject: subject,
            body: body,
            sentAt: new Date().toISOString()
        });
        localStorage.setItem('sentEmails', JSON.stringify(emails));
    }

    // G·ª≠i SMS (gi·∫£ l·∫≠p)
    sendSMS(to, message) {
        console.log(`üì± G·ª≠i SMS ƒë·∫øn: ${to}`);
        console.log(`N·ªôi dung: ${message}`);
        console.log('---');

        // Trong th·ª±c t·∫ø, ƒë√¢y s·∫Ω l√† API call ƒë·∫øn SMS service
        const sms = JSON.parse(localStorage.getItem('sentSMS') || '[]');
        sms.push({
            to: to,
            message: message,
            sentAt: new Date().toISOString()
        });
        localStorage.setItem('sentSMS', JSON.stringify(sms));
    }

    // Hi·ªÉn th·ªã th√¥ng b√°o trong app
    showInAppNotification(userId, title, message) {
        const notifications = JSON.parse(localStorage.getItem('notifications') || '[]');
        notifications.push({
            userId: userId,
            title: title,
            message: message,
            type: 'application_status',
            read: false,
            createdAt: new Date().toISOString()
        });
        localStorage.setItem('notifications', JSON.stringify(notifications));
    }

    // L·∫•y ·ª©ng tuy·ªÉn c·ªßa user
    getUserApplications(userId) {
        return this.applications.filter(app => app.userId === userId)
            .sort((a, b) => new Date(b.appliedAt) - new Date(a.appliedAt));
    }

    // L·∫•y ·ª©ng tuy·ªÉn cho job
    getJobApplications(jobId) {
        return this.applications.filter(app => app.jobId === jobId);
    }

    // L·∫•y th√¥ng b√°o c·ªßa user
    getUserNotifications(userId) {
        return JSON.parse(localStorage.getItem('notifications') || '[]')
            .filter(notif => notif.userId === userId)
            .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
    }

    // L∆∞u applications
    saveApplications() {
        localStorage.setItem('jobApplications', JSON.stringify(this.applications));
    }
}

// S·ª≠ d·ª•ng trong trang ·ª©ng tuy·ªÉn
function applyForJobWithValidation(jobId) {
    const user = JSON.parse(localStorage.getItem('user'));
    const token = localStorage.getItem('token');

    if (!user || !token) {
        alert('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ·ª©ng tuy·ªÉn!');
        window.location.href = 'account.html';
        return;
    }

    if (!user.hasCV) {
        if (confirm('B·∫°n c·∫ßn c√≥ CV ƒë·ªÉ ·ª©ng tuy·ªÉn. ƒê·∫øn trang t·∫°o CV ngay?')) {
            window.location.href = 'cv-create.html';
        }
        return;
    }

    try {
        const appSystem = new ApplicationSystem();
        const application = appSystem.applyForJob(jobId, user.id);
        
        alert('üéØ ƒê√£ g·ª≠i ƒë∆°n ·ª©ng tuy·ªÉn th√†nh c√¥ng!\nB·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o qua email v√† SMS khi c√≥ k·∫øt qu·∫£.');
        
        // C·∫≠p nh·∫≠t UI
        updateApplicationUI(application);
        
    } catch (error) {
        alert('‚ùå L·ªói: ' + error.message);
    }
}

// C·∫≠p nh·∫≠t UI sau khi ·ª©ng tuy·ªÉn
function updateApplicationUI(application) {
    const applyBtn = document.querySelector(`[data-job-id="${application.jobId}"]`);
    if (applyBtn) {
        applyBtn.textContent = '‚úÖ ƒê√£ ·ª©ng tuy·ªÉn';
        applyBtn.disabled = true;
        applyBtn.style.background = '#6c757d';
    }
}